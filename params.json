{"name":"Scrollinsidescroll","tagline":"Contains a project which shows how to add ScrollView inside ScrollView, ScrollView inside ListView, ListView inside GridView, etc.","body":"Scroll Inside Scroll\r\n==================\r\n\r\nThis project shows how to add a vertically scrollable view into another vertically scrollable view upto any level of depth.\r\n\r\nPlacing vertically scrollable view into another vertically scrollable view is a bit tedious in android. Here we show how to place, withour sacrificing the recycling feature of various <code>AbsListView</code>s, <code>ScrollView</code> inside <code>ScrollView</code>, <code>ScrollView</code> inside <code>ListView</code>, <code>ListView</code> inside <code>GridView</code>, etc. And even <code>ListView</code> indide <code>ScrollView</code> which in turn inside another <code>ScrollView</code>, etc.\r\n\r\n<b>Note</b>\r\nEventhough you can nest scroll views to any level, please consider the user experiance. This project contains a complicated xml layout file <code>scroll_in_scroll.xml</code> which has no good user experiance.\r\n\r\n<H4>Step 1</H4>\r\nWrite a method which determines wheather a <code>View</code> can be scrolled vertically and place the method inside a common utility class as follows. This method is taken from <code>ViewPager.java</code> and modified to find whether a <code>View</code> can vertically scrollable.\r\n\r\n\tpublic static boolean canScroll(View v, boolean checkV, int dy, int x, int y) {\r\n\t\tif (v instanceof ViewGroup) {\r\n\t\t\tfinal ViewGroup group = (ViewGroup) v;\r\n\t\t\tfinal int scrollX = v.getScrollX();\r\n\t\t\tfinal int scrollY = v.getScrollY();\r\n\t\t\tfinal int count = group.getChildCount();\r\n\t\t\tfor (int i = count - 1; i >= 0; i--) {\r\n\t\t\t\tfinal View child = group.getChildAt(i);\r\n\t\t\t\tif (x + scrollX >= child.getLeft()\r\n\t\t\t\t\t\t&& x + scrollX < child.getRight()\r\n\t\t\t\t\t\t&& y + scrollY >= child.getTop()\r\n\t\t\t\t\t\t&& y + scrollY < child.getBottom()\r\n\t\t\t\t\t\t&& canScroll(child, true, dy,\r\n\t\t\t\t\t\t\t\tx + scrollX - child.getLeft(), y + scrollY\r\n\t\t\t\t\t\t\t\t\t\t- child.getTop())) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn checkV && ViewCompat.canScrollVertically(v, -dy);\r\n\t}\r\n\r\n<H4>Step 2</H4>\r\nSubclass the enclosing vertically scrollable view, it may be <code>ScrollView</code> or <code>ListView</code>, or the like and override the <code>onInterceptTouchEvent()</code> method as follows.\r\n\r\n\tpublic boolean onInterceptTouchEvent(MotionEvent event) {\r\n\t  int action = event.getAction();\r\n\t\tfloat x = event.getX();\r\n\t\tfloat y = event.getY();\r\n\t\tfloat dy = y - mLastMotionY;\r\n\t\tswitch (action) {\r\n\t\tcase MotionEvent.ACTION_DOWN:\r\n\t\t\tmLastMotionY = y;\r\n\t\t\tbreak;\r\n\t\tcase MotionEvent.ACTION_MOVE:\r\n\t\t\tif (Util.canScroll(this, false, (int) dy, (int) x, (int) y)) {\r\n\t\t\t\tmLastMotionY = y;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\treturn super.onInterceptTouchEvent(event);\r\n\t}\r\n\t\r\n\r\n<H4>Step 3</H4>\r\nSubclass the enclosed vertically scrollable view, it may be <code>GridView</code> or <code>ListView</code> or the like and override the <code>onMeasure()</code> method as follows. No need to override this method in <code>ScrollView</code>. Its default implementation behaves in the right way.\r\n\r\n\tprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n\t\tsuper.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n\t\tint mode = MeasureSpec.getMode(widthMeasureSpec);\r\n\t\tif (mode == MeasureSpec.UNSPECIFIED) {\r\n\t\t\tint height = getLayoutParams().height;\r\n\t\t\tif (height > 0)\r\n\t\t\t\tsetMeasuredDimension(getMeasuredWidth(), height);\r\n\t\t}\r\n\t}\r\n\t\r\n<H4>Step 4</H4>\r\nFinally create an xml layout file as given below and see how it works. We have to hard code the <code>layout_height</code> of <code>CustomListView</code>. If you create the view hierarchy programmatically, then set the height via <code>LayoutParams</code>. \r\n\r\n    <com.dass.scroll_inside_scroll.CustomScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" >\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" >\r\n            \r\n            <!-- Other Children -->\r\n            \r\n            <com.dass.scroll_inside_scroll.CustomListView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"300dp\" >\r\n            </com.dass.scroll_inside_scroll.CustomListView>\r\n            \r\n            <!-- Other Children -->\r\n            \r\n        </LinearLayout>\r\n    </com.dass.scroll_inside_scroll.CustomScrollView>\r\n\r\nIn this project the classes <code>CustomListView</code>, <code>CustomExpandableListView</code>, <code>CustomGridView</code> overrides the method <code>onInterceptTouchEvent()</code> in order to place other vertically scrollable views inside them. If we dont add vertically scrollable views inside any of these classes then no need to override <code>onInterceptTouchEvent()</code>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}